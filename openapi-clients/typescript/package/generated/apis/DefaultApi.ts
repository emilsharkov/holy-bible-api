/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  BibleVerse,
  GetAudioBiblesRes,
  GetAudioBooksRes,
  GetAudioChaptersRes,
  GetBibleBooksRes,
  GetBibleChaptersRes,
  GetBibleVersesRes,
  GetBiblesRes,
} from '../models/index.js';
import {
    BibleVerseFromJSON,
    BibleVerseToJSON,
    GetAudioBiblesResFromJSON,
    GetAudioBiblesResToJSON,
    GetAudioBooksResFromJSON,
    GetAudioBooksResToJSON,
    GetAudioChaptersResFromJSON,
    GetAudioChaptersResToJSON,
    GetBibleBooksResFromJSON,
    GetBibleBooksResToJSON,
    GetBibleChaptersResFromJSON,
    GetBibleChaptersResToJSON,
    GetBibleVersesResFromJSON,
    GetBibleVersesResToJSON,
    GetBiblesResFromJSON,
    GetBiblesResToJSON,
} from '../models/index.js';

export interface GetAudioBibleBooksRequest {
    audioBibleId: number;
}

export interface GetAudioBibleChaptersRequest {
    audioBibleId: number;
    bookNum: number;
}

export interface GetAudioBiblesRequest {
    language?: string;
    version?: string;
}

export interface GetAudioChapterRequest {
    audioBibleId: number;
    bookNum: number;
    chapterNum: number;
}

export interface GetBibleBooksRequest {
    bibleId: number;
}

export interface GetBibleChaptersRequest {
    bibleId: number;
    bookNum: number;
}

export interface GetBibleVerseByNumberRequest {
    bibleId: number;
    bookNum: number;
    chapterNum: number;
    verseNum: number;
}

export interface GetBibleVersesRequest {
    bibleId: number;
    bookNum: number;
    chapterNum: number;
    start?: number;
    end?: number;
}

export interface GetBiblesRequest {
    language?: string;
    version?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async getAudioBibleBooksRaw(requestParameters: GetAudioBibleBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAudioBooksRes>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioBibleBooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/audio_bibles/{audio_bible_id}/books`;
        urlPath = urlPath.replace(`{${"audio_bible_id"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAudioBooksResFromJSON(jsonValue));
    }

    /**
     */
    async getAudioBibleBooks(requestParameters: GetAudioBibleBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAudioBooksRes> {
        const response = await this.getAudioBibleBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAudioBibleChaptersRaw(requestParameters: GetAudioBibleChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAudioChaptersRes>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioBibleChapters().'
            );
        }

        if (requestParameters['bookNum'] == null) {
            throw new runtime.RequiredError(
                'bookNum',
                'Required parameter "bookNum" was null or undefined when calling getAudioBibleChapters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/audio_bibles/{audio_bible_id}/books/{book_num}/chapters`;
        urlPath = urlPath.replace(`{${"audio_bible_id"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));
        urlPath = urlPath.replace(`{${"book_num"}}`, encodeURIComponent(String(requestParameters['bookNum'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAudioChaptersResFromJSON(jsonValue));
    }

    /**
     */
    async getAudioBibleChapters(requestParameters: GetAudioBibleChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAudioChaptersRes> {
        const response = await this.getAudioBibleChaptersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAudioBiblesRaw(requestParameters: GetAudioBiblesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAudioBiblesRes>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/audio_bibles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAudioBiblesResFromJSON(jsonValue));
    }

    /**
     */
    async getAudioBibles(requestParameters: GetAudioBiblesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAudioBiblesRes> {
        const response = await this.getAudioBiblesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAudioChapterRaw(requestParameters: GetAudioChapterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioChapter().'
            );
        }

        if (requestParameters['bookNum'] == null) {
            throw new runtime.RequiredError(
                'bookNum',
                'Required parameter "bookNum" was null or undefined when calling getAudioChapter().'
            );
        }

        if (requestParameters['chapterNum'] == null) {
            throw new runtime.RequiredError(
                'chapterNum',
                'Required parameter "chapterNum" was null or undefined when calling getAudioChapter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/audio_bibles/{audio_bible_id}/books/{book_num}/chapters/{chapter_num}`;
        urlPath = urlPath.replace(`{${"audio_bible_id"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));
        urlPath = urlPath.replace(`{${"book_num"}}`, encodeURIComponent(String(requestParameters['bookNum'])));
        urlPath = urlPath.replace(`{${"chapter_num"}}`, encodeURIComponent(String(requestParameters['chapterNum'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getAudioChapter(requestParameters: GetAudioChapterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAudioChapterRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getBibleBooksRaw(requestParameters: GetBibleBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBibleBooksRes>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBibleBooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/bibles/{bible_id}/books`;
        urlPath = urlPath.replace(`{${"bible_id"}}`, encodeURIComponent(String(requestParameters['bibleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBibleBooksResFromJSON(jsonValue));
    }

    /**
     */
    async getBibleBooks(requestParameters: GetBibleBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBibleBooksRes> {
        const response = await this.getBibleBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBibleChaptersRaw(requestParameters: GetBibleChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBibleChaptersRes>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBibleChapters().'
            );
        }

        if (requestParameters['bookNum'] == null) {
            throw new runtime.RequiredError(
                'bookNum',
                'Required parameter "bookNum" was null or undefined when calling getBibleChapters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/bibles/{bible_id}/books/{book_num}/chapters`;
        urlPath = urlPath.replace(`{${"bible_id"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"book_num"}}`, encodeURIComponent(String(requestParameters['bookNum'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBibleChaptersResFromJSON(jsonValue));
    }

    /**
     */
    async getBibleChapters(requestParameters: GetBibleChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBibleChaptersRes> {
        const response = await this.getBibleChaptersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBibleVerseByNumberRaw(requestParameters: GetBibleVerseByNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BibleVerse>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBibleVerseByNumber().'
            );
        }

        if (requestParameters['bookNum'] == null) {
            throw new runtime.RequiredError(
                'bookNum',
                'Required parameter "bookNum" was null or undefined when calling getBibleVerseByNumber().'
            );
        }

        if (requestParameters['chapterNum'] == null) {
            throw new runtime.RequiredError(
                'chapterNum',
                'Required parameter "chapterNum" was null or undefined when calling getBibleVerseByNumber().'
            );
        }

        if (requestParameters['verseNum'] == null) {
            throw new runtime.RequiredError(
                'verseNum',
                'Required parameter "verseNum" was null or undefined when calling getBibleVerseByNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/bibles/{bible_id}/books/{book_num}/chapters/{chapter_num}/verses/{verse_num}`;
        urlPath = urlPath.replace(`{${"bible_id"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"book_num"}}`, encodeURIComponent(String(requestParameters['bookNum'])));
        urlPath = urlPath.replace(`{${"chapter_num"}}`, encodeURIComponent(String(requestParameters['chapterNum'])));
        urlPath = urlPath.replace(`{${"verse_num"}}`, encodeURIComponent(String(requestParameters['verseNum'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BibleVerseFromJSON(jsonValue));
    }

    /**
     */
    async getBibleVerseByNumber(requestParameters: GetBibleVerseByNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BibleVerse> {
        const response = await this.getBibleVerseByNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBibleVersesRaw(requestParameters: GetBibleVersesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBibleVersesRes>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBibleVerses().'
            );
        }

        if (requestParameters['bookNum'] == null) {
            throw new runtime.RequiredError(
                'bookNum',
                'Required parameter "bookNum" was null or undefined when calling getBibleVerses().'
            );
        }

        if (requestParameters['chapterNum'] == null) {
            throw new runtime.RequiredError(
                'chapterNum',
                'Required parameter "chapterNum" was null or undefined when calling getBibleVerses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/bibles/{bible_id}/books/{book_num}/chapters/{chapter_num}/verses`;
        urlPath = urlPath.replace(`{${"bible_id"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"book_num"}}`, encodeURIComponent(String(requestParameters['bookNum'])));
        urlPath = urlPath.replace(`{${"chapter_num"}}`, encodeURIComponent(String(requestParameters['chapterNum'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBibleVersesResFromJSON(jsonValue));
    }

    /**
     */
    async getBibleVerses(requestParameters: GetBibleVersesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBibleVersesRes> {
        const response = await this.getBibleVersesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBiblesRaw(requestParameters: GetBiblesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBiblesRes>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/bibles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBiblesResFromJSON(jsonValue));
    }

    /**
     */
    async getBibles(requestParameters: GetBiblesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBiblesRes> {
        const response = await this.getBiblesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getHealthRaw(initOverrides);
        return await response.value();
    }

}
