/*
api

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService GetAudioBibleBooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var audioBibleId int32

		resp, httpRes, err := apiClient.DefaultAPI.GetAudioBibleBooks(context.Background(), audioBibleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAudioBibleChapters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var audioBibleId int32
		var bookNum int32

		resp, httpRes, err := apiClient.DefaultAPI.GetAudioBibleChapters(context.Background(), audioBibleId, bookNum).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAudioBibles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetAudioBibles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAudioChapter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var audioBibleId int32
		var bookNum int32
		var chapterNum int32

		httpRes, err := apiClient.DefaultAPI.GetAudioChapter(context.Background(), audioBibleId, bookNum, chapterNum).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetBibleBooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bibleId int32

		resp, httpRes, err := apiClient.DefaultAPI.GetBibleBooks(context.Background(), bibleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetBibleChapters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bibleId int32
		var bookNum int32

		resp, httpRes, err := apiClient.DefaultAPI.GetBibleChapters(context.Background(), bibleId, bookNum).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetBibleVerseByNumber", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bibleId int32
		var bookNum int32
		var chapterNum int32
		var verseNum int32

		resp, httpRes, err := apiClient.DefaultAPI.GetBibleVerseByNumber(context.Background(), bibleId, bookNum, chapterNum, verseNum).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetBibleVerses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bibleId int32
		var bookNum int32
		var chapterNum int32

		resp, httpRes, err := apiClient.DefaultAPI.GetBibleVerses(context.Background(), bibleId, bookNum, chapterNum).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetBibles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetBibles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetHealth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetHealth(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
