/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BibleVerse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BibleVerse{}

// BibleVerse struct for BibleVerse
type BibleVerse struct {
	BibleId int32 `json:"bible_id"`
	Book int32 `json:"book"`
	Chapter int32 `json:"chapter"`
	Text string `json:"text"`
	Verse int32 `json:"verse"`
}

type _BibleVerse BibleVerse

// NewBibleVerse instantiates a new BibleVerse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBibleVerse(bibleId int32, book int32, chapter int32, text string, verse int32) *BibleVerse {
	this := BibleVerse{}
	this.BibleId = bibleId
	this.Book = book
	this.Chapter = chapter
	this.Text = text
	this.Verse = verse
	return &this
}

// NewBibleVerseWithDefaults instantiates a new BibleVerse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBibleVerseWithDefaults() *BibleVerse {
	this := BibleVerse{}
	return &this
}

// GetBibleId returns the BibleId field value
func (o *BibleVerse) GetBibleId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BibleId
}

// GetBibleIdOk returns a tuple with the BibleId field value
// and a boolean to check if the value has been set.
func (o *BibleVerse) GetBibleIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BibleId, true
}

// SetBibleId sets field value
func (o *BibleVerse) SetBibleId(v int32) {
	o.BibleId = v
}

// GetBook returns the Book field value
func (o *BibleVerse) GetBook() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Book
}

// GetBookOk returns a tuple with the Book field value
// and a boolean to check if the value has been set.
func (o *BibleVerse) GetBookOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Book, true
}

// SetBook sets field value
func (o *BibleVerse) SetBook(v int32) {
	o.Book = v
}

// GetChapter returns the Chapter field value
func (o *BibleVerse) GetChapter() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Chapter
}

// GetChapterOk returns a tuple with the Chapter field value
// and a boolean to check if the value has been set.
func (o *BibleVerse) GetChapterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chapter, true
}

// SetChapter sets field value
func (o *BibleVerse) SetChapter(v int32) {
	o.Chapter = v
}

// GetText returns the Text field value
func (o *BibleVerse) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *BibleVerse) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *BibleVerse) SetText(v string) {
	o.Text = v
}

// GetVerse returns the Verse field value
func (o *BibleVerse) GetVerse() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Verse
}

// GetVerseOk returns a tuple with the Verse field value
// and a boolean to check if the value has been set.
func (o *BibleVerse) GetVerseOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verse, true
}

// SetVerse sets field value
func (o *BibleVerse) SetVerse(v int32) {
	o.Verse = v
}

func (o BibleVerse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BibleVerse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bible_id"] = o.BibleId
	toSerialize["book"] = o.Book
	toSerialize["chapter"] = o.Chapter
	toSerialize["text"] = o.Text
	toSerialize["verse"] = o.Verse
	return toSerialize, nil
}

func (o *BibleVerse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bible_id",
		"book",
		"chapter",
		"text",
		"verse",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBibleVerse := _BibleVerse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBibleVerse)

	if err != nil {
		return err
	}

	*o = BibleVerse(varBibleVerse)

	return err
}

type NullableBibleVerse struct {
	value *BibleVerse
	isSet bool
}

func (v NullableBibleVerse) Get() *BibleVerse {
	return v.value
}

func (v *NullableBibleVerse) Set(val *BibleVerse) {
	v.value = val
	v.isSet = true
}

func (v NullableBibleVerse) IsSet() bool {
	return v.isSet
}

func (v *NullableBibleVerse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBibleVerse(val *BibleVerse) *NullableBibleVerse {
	return &NullableBibleVerse{value: val, isSet: true}
}

func (v NullableBibleVerse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBibleVerse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


