/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AudioBible type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioBible{}

// AudioBible struct for AudioBible
type AudioBible struct {
	AudioBibleId int32 `json:"audio_bible_id"`
	Language string `json:"language"`
	Version NullableString `json:"version,omitempty"`
}

type _AudioBible AudioBible

// NewAudioBible instantiates a new AudioBible object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioBible(audioBibleId int32, language string) *AudioBible {
	this := AudioBible{}
	this.AudioBibleId = audioBibleId
	this.Language = language
	return &this
}

// NewAudioBibleWithDefaults instantiates a new AudioBible object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioBibleWithDefaults() *AudioBible {
	this := AudioBible{}
	return &this
}

// GetAudioBibleId returns the AudioBibleId field value
func (o *AudioBible) GetAudioBibleId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AudioBibleId
}

// GetAudioBibleIdOk returns a tuple with the AudioBibleId field value
// and a boolean to check if the value has been set.
func (o *AudioBible) GetAudioBibleIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudioBibleId, true
}

// SetAudioBibleId sets field value
func (o *AudioBible) SetAudioBibleId(v int32) {
	o.AudioBibleId = v
}

// GetLanguage returns the Language field value
func (o *AudioBible) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *AudioBible) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *AudioBible) SetLanguage(v string) {
	o.Language = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AudioBible) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AudioBible) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *AudioBible) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *AudioBible) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *AudioBible) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *AudioBible) UnsetVersion() {
	o.Version.Unset()
}

func (o AudioBible) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioBible) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["audio_bible_id"] = o.AudioBibleId
	toSerialize["language"] = o.Language
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return toSerialize, nil
}

func (o *AudioBible) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audio_bible_id",
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAudioBible := _AudioBible{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAudioBible)

	if err != nil {
		return err
	}

	*o = AudioBible(varAudioBible)

	return err
}

type NullableAudioBible struct {
	value *AudioBible
	isSet bool
}

func (v NullableAudioBible) Get() *AudioBible {
	return v.value
}

func (v *NullableAudioBible) Set(val *AudioBible) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioBible) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioBible) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioBible(val *AudioBible) *NullableAudioBible {
	return &NullableAudioBible{value: val, isSet: true}
}

func (v NullableAudioBible) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioBible) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


