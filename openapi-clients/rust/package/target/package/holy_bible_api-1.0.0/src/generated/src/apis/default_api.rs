/*
 * api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_audio_bible_books`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioBibleBooksError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audio_bible_chapters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioBibleChaptersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audio_bibles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioBiblesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audio_chapter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudioChapterError {
    Status404(String),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bible_books`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBibleBooksError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bible_chapters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBibleChaptersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bible_verse_by_number`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBibleVerseByNumberError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bible_verses`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBibleVersesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bibles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBiblesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_health`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHealthError {
    UnknownValue(serde_json::Value),
}


pub async fn get_audio_bible_books(configuration: &configuration::Configuration, audio_bible_id: i32) -> Result<models::GetAudioBooksRes, Error<GetAudioBibleBooksError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_audio_bible_id = audio_bible_id;

    let uri_str = format!("{}/audio_bibles/{audio_bible_id}/books", configuration.base_path, audio_bible_id=p_path_audio_bible_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAudioBooksRes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAudioBooksRes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAudioBibleBooksError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_audio_bible_chapters(configuration: &configuration::Configuration, audio_bible_id: i32, book_num: i32) -> Result<models::GetAudioChaptersRes, Error<GetAudioBibleChaptersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_audio_bible_id = audio_bible_id;
    let p_path_book_num = book_num;

    let uri_str = format!("{}/audio_bibles/{audio_bible_id}/books/{book_num}/chapters", configuration.base_path, audio_bible_id=p_path_audio_bible_id, book_num=p_path_book_num);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAudioChaptersRes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAudioChaptersRes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAudioBibleChaptersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_audio_bibles(configuration: &configuration::Configuration, language: Option<&str>, version: Option<&str>) -> Result<models::GetAudioBiblesRes, Error<GetAudioBiblesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_language = language;
    let p_query_version = version;

    let uri_str = format!("{}/audio_bibles", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_language {
        req_builder = req_builder.query(&[("language", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_version {
        req_builder = req_builder.query(&[("version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAudioBiblesRes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAudioBiblesRes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAudioBiblesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_audio_chapter(configuration: &configuration::Configuration, audio_bible_id: i32, book_num: i32, chapter_num: i32) -> Result<(), Error<GetAudioChapterError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_audio_bible_id = audio_bible_id;
    let p_path_book_num = book_num;
    let p_path_chapter_num = chapter_num;

    let uri_str = format!("{}/audio_bibles/{audio_bible_id}/books/{book_num}/chapters/{chapter_num}", configuration.base_path, audio_bible_id=p_path_audio_bible_id, book_num=p_path_book_num, chapter_num=p_path_chapter_num);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAudioChapterError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_bible_books(configuration: &configuration::Configuration, bible_id: i32) -> Result<models::GetBibleBooksRes, Error<GetBibleBooksError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_bible_id = bible_id;

    let uri_str = format!("{}/bibles/{bible_id}/books", configuration.base_path, bible_id=p_path_bible_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetBibleBooksRes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetBibleBooksRes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBibleBooksError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_bible_chapters(configuration: &configuration::Configuration, bible_id: i32, book_num: i32) -> Result<models::GetBibleChaptersRes, Error<GetBibleChaptersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_bible_id = bible_id;
    let p_path_book_num = book_num;

    let uri_str = format!("{}/bibles/{bible_id}/books/{book_num}/chapters", configuration.base_path, bible_id=p_path_bible_id, book_num=p_path_book_num);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetBibleChaptersRes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetBibleChaptersRes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBibleChaptersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_bible_verse_by_number(configuration: &configuration::Configuration, bible_id: i32, book_num: i32, chapter_num: i32, verse_num: i32) -> Result<models::BibleVerse, Error<GetBibleVerseByNumberError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_bible_id = bible_id;
    let p_path_book_num = book_num;
    let p_path_chapter_num = chapter_num;
    let p_path_verse_num = verse_num;

    let uri_str = format!("{}/bibles/{bible_id}/books/{book_num}/chapters/{chapter_num}/verses/{verse_num}", configuration.base_path, bible_id=p_path_bible_id, book_num=p_path_book_num, chapter_num=p_path_chapter_num, verse_num=p_path_verse_num);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BibleVerse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BibleVerse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBibleVerseByNumberError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_bible_verses(configuration: &configuration::Configuration, bible_id: i32, book_num: i32, chapter_num: i32, start: Option<i32>, end: Option<i32>) -> Result<models::GetBibleVersesRes, Error<GetBibleVersesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_bible_id = bible_id;
    let p_path_book_num = book_num;
    let p_path_chapter_num = chapter_num;
    let p_query_start = start;
    let p_query_end = end;

    let uri_str = format!("{}/bibles/{bible_id}/books/{book_num}/chapters/{chapter_num}/verses", configuration.base_path, bible_id=p_path_bible_id, book_num=p_path_book_num, chapter_num=p_path_chapter_num);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_start {
        req_builder = req_builder.query(&[("start", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_end {
        req_builder = req_builder.query(&[("end", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetBibleVersesRes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetBibleVersesRes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBibleVersesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_bibles(configuration: &configuration::Configuration, language: Option<&str>, version: Option<&str>) -> Result<models::GetBiblesRes, Error<GetBiblesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_language = language;
    let p_query_version = version;

    let uri_str = format!("{}/bibles", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_language {
        req_builder = req_builder.query(&[("language", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_version {
        req_builder = req_builder.query(&[("version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetBiblesRes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetBiblesRes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBiblesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_health(configuration: &configuration::Configuration, ) -> Result<String, Error<GetHealthError>> {

    let uri_str = format!("{}/health", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Ok(content),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `String`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetHealthError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

